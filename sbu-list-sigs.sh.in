#!/usr/bin/env bash

usage () {
	local old_xtrace
	old_xtrace="$(shopt -po xtrace || :)"
	set +o xtrace
	{
		echo "${script_name} - List signature certificates of signed files."
		echo "Usage: ${script_name} [flags] in-file [in-file]..."
		echo "Option flags:"
		echo "  -h --help         - Show this help and exit."
		echo "  -v --verbose      - Verbose execution."
		echo "  -g --debug        - Extra verbose execution."
		echo "Info:"
		echo '  @PACKAGE_NAME@ v@PACKAGE_VERSION@'
		echo '  @PACKAGE_URL@'
		echo "  Send bug reports to: Geoff Levand <geoff@infradead.org>."
	} >&2
	eval "${old_xtrace}"
}

process_opts() {
	local short_opts="hvg"
	local long_opts="help,verbose,debug"

	usage=''
	verbose=''

	local opts
	opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${script_name}" -- "$@")

	eval set -- "${opts}"

	while true ; do
		# echo "${FUNCNAME[0]}: (${#}) '${*}'" >&2
		case "${1}" in
		-h | --help)
			usage=1
			shift
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-g | --debug)
			verbose=1
			debug=1
			set -x
			shift
			;;
		--)
			shift
			in_files=("$@")
			break
			;;
		*)
			echo "${script_name}: ERROR: Internal opts: '${*}'" >&2
			exit 1
			;;
		esac
	done
}

#===============================================================================
export PS4='\[\e[0;33m\]+ ${BASH_SOURCE##*/}:${LINENO}:(${FUNCNAME[0]:-main}):\[\e[0m\] '

script_name="${0##*/}"
base_name="${script_name##*/%}"
base_name="${base_name%.sh}"

SCRIPTS_TOP=${SCRIPTS_TOP:-"$(cd "${BASH_SOURCE%/*}" && pwd)"}

start_time="$(date +%Y.%m.%d-%H.%M.%S)"
SECONDS=0

trap "on_exit 'Failed'" EXIT
trap 'on_err ${FUNCNAME[0]:-main} ${LINENO} ${?}' ERR

set -eE
set -o pipefail
set -o nounset

source "${SCRIPTS_TOP}/sbu-lib.sh"
source "${SCRIPTS_TOP}/tdd-lib/util.sh"

declare -a in_files

process_opts "${@}"

if [[ ${usage} ]]; then
	usage
	trap - EXIT
	exit 0
fi

check_sb_progs
check_in_files "${in_files[@]}"

echo "Generated by ${script_name} (Secure Boot Utils) - ${start_time}"
echo 'https://github.com/glevand/secure-boot-utils'

for f in "${in_files[@]}"; do
	list_file_cert "${f}"
done

trap "on_exit 'Success.'" EXIT
exit 0
